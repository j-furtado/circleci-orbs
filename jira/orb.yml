version: 2.1
description: |
    An orb that can be used to interact with JIRA in a CI pipeline.
display:
    home_url: https://github.com/ovotech/team-cppe/blob/main/circleci-orbs/jira/README.md
    source_url: https://www.github.com/ovotech/team-cppe
commands:
    create_issue:
        description: |
            Create new issue on Jira board
        parameters:
            api_token:
                default: $JIRA_API_TOKEN
                description: The JIRA API token.
                type: string
            issue_content:
                description: The content of the issue to be created.
                type: string
            issue_summary:
                description: The summary of the issue to be created.
                type: string
            issue_type:
                description: The type of the issue to be created.
                type: string
            priority:
                default: ""
                description: The priority of the issue to be created.
                type: string
            project_key:
                description: The project key of the board where the issue is being created.
                type: string
            unique_id:
                default: ""
                description: The label of the issue to be created. This needs to be unique for each issue to avoid duplication.
                type: string
            user_email_id:
                default: $JIRA_USER_EMAIL_ID
                description: The user email id of the account using which the api_token is configured.
                type: string
        steps:
            - checkout
            - run:
                command: |
                    {
                      echo "export PARAM_USER_EMAIL_ID=$(echo << parameters.user_email_id >>)"
                      echo "export PARAM_API_TOKEN=$(echo << parameters.api_token >>)"
                      echo "export PARAM_PROJECT_KEY=$(echo << parameters.project_key >>)"
                      echo "export PARAM_ISSUE_LABEL=$(echo << parameters.unique_id >>)"
                      echo "export PARAM_ISSUE_SUMMARY=$(echo << parameters.issue_summary >>)"
                      echo "export PARAM_ISSUE_CONTENT=$(echo << parameters.issue_content >>)"
                      echo "export PARAM_ISSUE_TYPE=$(echo << parameters.issue_type >>)"
                      echo "export PARAM_PRIORITY=$(echo << parameters.priority >>)"
                    } >> $BASH_ENV
                name: Setting variables
            - run:
                command: |
                    #!/bin/bash
                    create_issue() {
                      if [ -z "$PARAM_API_TOKEN" ]; then
                        echo "Mandatory parameters have not been set! You must specify a JIRA API token in order to allow JIRA to create an issue with appropriate details on this board."
                        echo "You must create a JIRA API token (ideally for a service user) in CircleCI using the following instructions: https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/"
                        exit 1
                      else
                        export API_TOKEN="$PARAM_API_TOKEN"
                      fi

                      if [ -z "$PARAM_PROJECT_KEY" ]; then
                        echo "Mandatory parameter PROJECT_KEY has not been set! e.g.PARAM_PROJECT_KEY=\"CPPE\"."
                        exit 1
                      else
                        export PROJECT_KEY=$PARAM_PROJECT_KEY
                      fi

                      if [ -z "$PARAM_USER_EMAIL_ID" ]; then
                        echo "Mandatory parameters have not been set! You must specify a JIRA user email id in order to allow JIRA to create an issue with appropriate details on this board. e.g.cppe.slackbot@ovo.com"
                        exit 1
                      else
                        export USER_EMAIL_ID="$PARAM_USER_EMAIL_ID"
                      fi

                      if [ -z "$PARAM_ISSUE_LABEL" ]; then
                        export ISSUE_LABEL=""
                      else
                        export ISSUE_LABEL=$PARAM_ISSUE_LABEL
                      fi

                      if [ -z "$PARAM_ISSUE_SUMMARY" ]; then
                        echo "Mandatory parameter ISSUE_SUMMARY has not been set! e.g.PARAM_ISSUE_SUMMARY=\"Snyk vulnerability - HIGH\"."
                        exit 1
                      else
                        export ISSUE_SUMMARY=$PARAM_ISSUE_SUMMARY
                      fi

                      if [ -z "$PARAM_ISSUE_CONTENT" ]; then
                        echo "Mandatory parameter ISSUE_CONTENT has not been set! e.g.PARAM_ISSUE_CONTENT=\"Snyk vulnerability - HIGH\""
                        exit 1
                      else
                        export ISSUE_CONTENT=$PARAM_ISSUE_CONTENT
                      fi

                      if [ -z "$PARAM_PRIORITY" ]; then
                        export PRIORITY=""
                      else
                        export PRIORITY=$PARAM_PRIORITY
                      fi

                      if [ -z "$PARAM_ISSUE_TYPE" ]; then
                        echo "Mandatory parameter ISSUE_TYPE has not been set! e.g.PARAM_ISSUE_TYPE=\"Engagement\""
                        exit 1
                      else
                        export ISSUE_TYPE=$PARAM_ISSUE_TYPE
                      fi

                      JSON_BODY=$(jq -rcn --arg project_key "$PROJECT_KEY" --arg issuelabels "$ISSUE_LABEL" '
                        {
                          "fields": [
                            "summary"
                          ],
                          "fieldsByKeys": false,
                          "jql": "project = \($project_key) AND labels = \($issuelabels)"
                        }
                    ')

                      JIRA_AUTH_HTTP_STATUS=$(curl --write-out "%{http_code}" -s "https://ovotech.atlassian.net/rest/api/3/search" --user "$USER_EMAIL_ID:$PARAM_API_TOKEN" --header 'Accept: application/json' --header 'Content-Type: application/json' --data "$JSON_BODY" --output /dev/null)

                      # Checking if returned status code is not 200
                      if [ "${JIRA_AUTH_HTTP_STATUS}" != "200" ]; then
                        echo "${JIRA_AUTH_HTTP_STATUS}: Unable to authenticate because provided JIRA Token is invalid! Exiting..."
                        echo "You must create a JIRA API token (ideally for a service user) in CircleCI using the following instructions: https://support.atlassian.com/atlassian-account/docs/manage-api-tokens-for-your-atlassian-account/"
                        exit 1
                      fi

                      EXISTING_ISSUE=$(curl "https://ovotech.atlassian.net/rest/api/3/search" --user "$USER_EMAIL_ID:$PARAM_API_TOKEN" --header 'Accept: application/json' --header 'Content-Type: application/json' --data "$JSON_BODY")
                      EXISTING_ISSUE_COUNT=$(echo "${EXISTING_ISSUE}" | jq '.issues | length')

                      if [ "${EXISTING_ISSUE_COUNT}" != 0 ]; then
                        echo "An issue with the same label already exist on this board !"
                      else
                        echo "Creating a new issue on the board!"
                        create_issue_main
                      fi
                    }

                    create_issue_main() {
                      if [ "$PRIORITY" = "" ]; then
                        JSON_BODY=$(jq -rcn '
                        {
                          "fields": {
                        "summary": env.ISSUE_SUMMARY,
                        "issuetype": {
                          "name": env.ISSUE_TYPE
                        },
                        "labels": [
                          env.ISSUE_LABEL
                        ],
                        "project": {
                          "key": env.PROJECT_KEY
                        },
                        "description": {
                          "content": [
                            {
                              "content": [
                                {
                                  "text": env.ISSUE_CONTENT,
                                  "type": "text"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "type": "doc",
                          "version": 1
                        }
                      }
                      }
                    ')
                        export JSON_BODY
                      else
                        JSON_BODY=$(jq -rcn '
                        {
                          "fields": {
                        "summary": env.ISSUE_SUMMARY,
                        "issuetype": {
                          "name": env.ISSUE_TYPE
                        },
                        "labels": [
                          env.ISSUE_LABEL
                        ],
                        "priority": {
                          "name": env.PRIORITY
                        },
                        "project": {
                          "key": env.PROJECT_KEY
                        },
                        "description": {
                          "content": [
                            {
                              "content": [
                                {
                                  "text": env.ISSUE_CONTENT,
                                  "type": "text"
                                }
                              ],
                              "type": "paragraph"
                            }
                          ],
                          "type": "doc",
                          "version": 1
                        }
                      }
                      }
                    ')
                        export JSON_BODY
                      fi
                      curl --request POST \
                        --url 'https://ovotech.atlassian.net/rest/api/3/issue' \
                        --user "$USER_EMAIL_ID:$PARAM_API_TOKEN" \
                        --header 'Accept: application/json' \
                        --header 'Content-Type: application/json' \
                        --data "$JSON_BODY"
                    }

                    # Will not run if sourced for bats-core tests.
                    ORB_TEST_ENV="bats-core"
                    if [ "${0#*"$ORB_TEST_ENV"}" == "$0" ]; then
                      create_issue
                    fi
                name: Create new issue on Jira board
jobs:
    create_issue:
        description: |
            Create new issue on Jira board
        machine:
            image: ubuntu-2004:202104-01
        parameters:
            api_token:
                default: $JIRA_API_TOKEN
                description: The JIRA API token.
                type: string
            issue_content:
                description: The content of the issue to be created.
                type: string
            issue_summary:
                description: The summary of the issue to be created.
                type: string
            issue_type:
                description: The type of the issue to be created.
                type: string
            priority:
                default: ""
                description: The priority of the issue to be created. If not set it will take the default as Medium.
                type: string
            project_key:
                description: The project key of the board where the issue is being created.
                type: string
            unique_id:
                default: ""
                description: The label of the issue to be created. This needs to be unique for each issue to avoid duplication.
                type: string
            user_email_id:
                default: $JIRA_USER_EMAIL_ID
                description: The user email id of the account using which the api_token is configured.
                type: string
        steps:
            - create_issue:
                api_token: <<parameters.api_token>>
                issue_content: <<parameters.issue_content>>
                issue_summary: <<parameters.issue_summary>>
                issue_type: <<parameters.issue_type>>
                project_key: <<parameters.project_key>>
                unique_id: <<parameters.unique_id>>
                user_email_id: <<parameters.user_email_id>>
examples:
    create_issue:
        description: |
            Create new issue on Jira board
        usage:
            version: "2.1"
            orbs:
                jira: ovotech/jira@1.0.0
            workflows:
                jira-workflow:
                    jobs:
                        - jira/create_issue:
                            api_token: $JIRA_API_TOKEN
                            issue_content: Snyk vulnerability - Critical
                            issue_summary: Snyk vulnerability - Critical
                            issue_type: Engagement
                            project_key: CPPE
                            user_email_id: $JIRA_USER_EMAIL_ID

